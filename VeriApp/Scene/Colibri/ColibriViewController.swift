//
//  ColibriViewController.swift
//  VeriApp
//
//  Created by Emilio on 11/08/21.
//  Copyright (c) 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol ColibriDisplayLogic: AnyObject
{
    func displayTableData(data: ColibriModel.Verificentros?)
}

class ColibriViewController: VeriAppViewController, ColibriDisplayLogic
{
    func displayTableData(data: ColibriModel.Verificentros?) {
        self.tableData = data
    }
    
  var interactor: ColibriBusinessLogic?
  var router: (NSObjectProtocol & ColibriRoutingLogic & ColibriDataPassing)?
    // MARK: Outlets
    
    
    @IBOutlet weak var tableView: UITableView!
    
    @IBOutlet weak var tiitleView: UIView!
   //
    var tableData : ColibriModel.Verificentros?
    
  // MARK: Object lifecycle
  
  override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
  {
    super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
    setup()
  }
  
  required init?(coder aDecoder: NSCoder)
  {
    super.init(coder: aDecoder)
    setup()
  }
  
  // MARK: Setup
  
  private func setup()
  {
    let viewController = self
    let interactor = ColibriInteractor()
    let presenter = ColibriPresenter()
    let router = ColibriRouter()
    viewController.interactor = interactor
    viewController.router = router
    interactor.presenter = presenter
    presenter.viewController = viewController
    router.viewController = viewController
    router.dataStore = interactor
  }
  
  // MARK: Routing
  
  override func prepare(for segue: UIStoryboardSegue, sender: Any?)
  {
    if let scene = segue.identifier {
      let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
      if let router = router, router.responds(to: selector) {
        router.perform(selector, with: segue)
      }
    }
  }
  
  // MARK: View lifecycle
  
  override func viewDidLoad()
  {
    super.viewDidLoad()
    Configure()
  }
  
  // MARK: Do something
  
  //@IBOutlet weak var nameTextField: UITextField!
  
  func Configure()
  {
    //read json
     
      if let localData = self.interactor?.readLocalFile(forName: "ListaVeri") {
          self.interactor!.parse(jsonData: localData)
      }
    //table
    tableView.tableFooterView = UIView()
    self.tableView.delegate = self
    self.tableView.dataSource = self
    //Color and table border
    tableView.layer.masksToBounds = true
    tableView.layer.borderColor = Constants.Color.ColibriGreen.cgColor
    tableView.layer.borderWidth = 3.0
    //tittleview
    self.tiitleView.layer.masksToBounds = true
    self.tiitleView.layer.borderColor = Constants.Color.ColibriGreen.cgColor
    self.tiitleView.layer.borderWidth = 3.0
  }
  
  
}


extension ColibriViewController: UITableViewDelegate,UITableViewDataSource{
    
    
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return (self.tableData?.Table!.count)!
        
    }
    
    
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        
        
    
            guard let cell = tableView.dequeueReusableCell(withIdentifier: "colibriCell", for: indexPath) as? colibriTableViewCell else{
                return UITableViewCell()
        }
        //
        cell.layer.masksToBounds = true
        cell.layer.borderColor = Constants.Color.ColibriGreen.cgColor
        cell.layer.borderWidth = 3.0
        
        cell.lblName.text = self.tableData?.Table![indexPath.row].Nombre
            return cell
        
                
    }
    
    func tableView(_ tableView: UITableView, willSelectRowAt indexPath: IndexPath) -> IndexPath? {
        
        print(indexPath.row)
        if let url = URL(string: (self.tableData?.Table![indexPath.row].Link)! ){
            UIApplication.shared.open(url)
        }
        return indexPath
    }
    
    
}
