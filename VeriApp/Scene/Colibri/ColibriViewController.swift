//
//  ColibriViewController.swift
//  VeriApp
//
//  Created by Emilio on 11/08/21.
//  Copyright (c) 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import RSSelectionMenu


protocol ColibriDisplayLogic: AnyObject
{
    func displayTableData(data: ColibriModel.Verificentros?)
    func displayAlert()
}

class ColibriViewController: VeriAppViewController, ColibriDisplayLogic
{
    func displayAlert() {
        print("SIN DATOS")
    }
    
    func displayTableData(data: ColibriModel.Verificentros?) {
        self.tableData = data
    }
    
    
  var interactor: ColibriBusinessLogic?
  var router: (NSObjectProtocol & ColibriRoutingLogic & ColibriDataPassing)?
    // MARK: Outlets
    
    
    @IBOutlet weak var topTittle: UILabel!
    @IBOutlet weak var tableView: UITableView!
    @IBOutlet weak var tiitleView: UIView!
    @IBOutlet weak var verificentroTaller: UIImageView!
    @IBOutlet weak var MunicipioTipo: UIImageView!
    @IBOutlet weak var gasolinaFilterImage: UIImageView!
    //
    var tableData : ColibriModel.Verificentros?
    let simpleDataArray = ["Verificentro", "Taller"]
    let simpleTipoDataArray = ["Gasolina y diesel", "Solo gasolina"]
    let Todosmunicipios = ["Acolman", "Amecameca", "Atizapán de Zaragoza", "Atlacomulco", "Chalco", "Chicoloapan", "Chimalhuacán", "Coacalco", "Cuautitlán Izcallí", "Ecatepec", "Huixquilucan", "Ixtapaluca", "Ixtapaluca", "Jilotepec", "La Paz", "Melchor Ocampo", "Metepec", "Naucalpan", "Nezahualcóyotl", "Nicolas Romero", "Santiago Tianguistenco", "Tecamac", "Tenancingo", "Teoloyucan", "Teotihuacan", "Tepotzotlán", "Texcoco", "Tlalnepantla", "Toluca", "Tultepec", "Tultitlan", "Valle De Chalco Solidaridad", "Zumpango"]
    
    let Tallermunicipios = ["Chalco", "Chicoloapan", "Coacalco", "Cuautitlán Izcalli", "Ecatepec", "Ixtapaluca", "La Paz", "Naucalpan", "Nezahualcóyotl", "Texcoco", "Tlalnepantla", "Toluca", "Tultitlan"]
    
    
    
    var simpleSelectedArray = [String]()
    var simpleSelectedMunicipiosArray = [String]()
    var simpleSelectedTipoArray = [String]()
  // MARK: Object lifecycle
  
  override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
  {
    super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
    setup()
  }
  
  required init?(coder aDecoder: NSCoder)
  {
    super.init(coder: aDecoder)
    setup()
  }
  
  // MARK: Setup
  
  private func setup()
  {
    let viewController = self
    let interactor = ColibriInteractor()
    let presenter = ColibriPresenter()
    let router = ColibriRouter()
    viewController.interactor = interactor
    viewController.router = router
    interactor.presenter = presenter
    presenter.viewController = viewController
    router.viewController = viewController
    router.dataStore = interactor
  }
  
  // MARK: Routing
  
  override func prepare(for segue: UIStoryboardSegue, sender: Any?)
  {
    if let scene = segue.identifier {
      let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
      if let router = router, router.responds(to: selector) {
        router.perform(selector, with: segue)
      }
    }
  }
  
  // MARK: View lifecycle
  
  override func viewDidLoad()
  {
    super.viewDidLoad()
      //
      let sortedArray = Tallermunicipios.sorted { $0.localizedCaseInsensitiveCompare($1) == ComparisonResult.orderedAscending }
      print(sortedArray)
    Configure()
  }
  
  // MARK: Do something
  
  //@IBOutlet weak var nameTextField: UITextField!
  
  func Configure()
  {
     
      //
      
      self.gasolinaFilterImage.isHidden = true
    //read json
     
      if let localData = self.interactor?.readLocalFile(forName: "ListaVeri") {
          self.interactor!.parse(jsonData: localData)
      }
      //filter config images
      let tapFiltro1 = UITapGestureRecognizer(target: self, action: #selector(tapFiltroVT))
      self.verificentroTaller.isUserInteractionEnabled = true
      self.verificentroTaller.addGestureRecognizer(tapFiltro1)
      
      let tapFiltro2 = UITapGestureRecognizer(target: self, action: #selector(tapFiltroMunicipio))
      self.MunicipioTipo.isUserInteractionEnabled = true
      self.MunicipioTipo.addGestureRecognizer(tapFiltro2)
      
      let tapFiltro3 = UITapGestureRecognizer(target: self, action: #selector(tapFiltroTipo))
      self.gasolinaFilterImage.isUserInteractionEnabled = true
      self.gasolinaFilterImage.addGestureRecognizer(tapFiltro3)
      
    //table
    tableView.tableFooterView = UIView()
    self.tableView.delegate = self
    self.tableView.dataSource = self
    //Color and table border
    tableView.layer.masksToBounds = true
    tableView.layer.borderColor = Constants.Color.ColibriGreen.cgColor
    tableView.layer.borderWidth = 3.0
    //tittleview
    self.tiitleView.layer.masksToBounds = true
    self.tiitleView.layer.borderColor = Constants.Color.ColibriGreen.cgColor
    self.tiitleView.layer.borderWidth = 3.0
      //resetear  user defaults
      UserDefaultsManager.saveUserDefaults(value: [""], key: .lugar)
  }
  
    @objc func tapFiltroVT(sender:UITapGestureRecognizer) {
        //dropDownList
        let selectionMenu = RSSelectionMenu(dataSource: simpleDataArray) { (cell, item, indexPath) in
            cell.textLabel?.text = item
        }
        
        if  UserDefaultsManager.getUserDefaultsArray(.lugar) == nil {
            UserDefaultsManager.saveUserDefaults(value: [""], key: .lugar)
        }
        
        let rememberSelectedArray = UserDefaultsManager.getUserDefaultsArray(.lugar) as! [String]
        
        
        
        //recordar seleccion
        selectionMenu.setSelectedItems(items: rememberSelectedArray) { [weak self] (item, index, isSelected, selectedItems) in

            self?.simpleSelectedArray = selectedItems
        }
        
        
        //mostrar pop
        selectionMenu.show(style: .popover(sourceView: self.verificentroTaller, size: CGSize(width: 250, height: 70)), from: self)
        
        //seleccionando
        selectionMenu.onDismiss = {selectedItems in
            
            if selectedItems == [""] {
                return
            }else{
            
            UserDefaultsManager.saveUserDefaults(value: selectedItems, key: .lugar)
           
           let toprint = UserDefaultsManager.getUserDefaultsArray(.lugar)
            
            //de nuevo datos
            if let localData = self.interactor?.readLocalFile(forName: "ListaVeri") {
                
                self.interactor!.parseFiltered(jsonData: localData, filtro: toprint![0] as! String)
            }
                //RESETEAR OTROS FILTROS
                UserDefaultsManager.saveUserDefaults(value: [""], key: .municipio)
                UserDefaultsManager.saveUserDefaults(value: [""], key: .tipo)
            
                self.topTittle.text = toprint![0] as? String
                if self.topTittle.text != "Verificentro"{
                    self.gasolinaFilterImage.isHidden = true
                }else{self.gasolinaFilterImage.isHidden = false}
            self.tableView.reloadData()
            }
        }
    }
    
    @objc func tapFiltroMunicipio(sender:UITapGestureRecognizer) {
        //dropDownList
        var municiposDesplegar:[String] = []
        let toprint = UserDefaultsManager.getUserDefaultsArray(.lugar)
        
        if toprint![0] as? String == "Taller" {
            municiposDesplegar = self.Tallermunicipios
        }else {
            municiposDesplegar = self.Todosmunicipios
        }
        
        let selectionMenu = RSSelectionMenu(dataSource: municiposDesplegar) { (cell, item, indexPath) in
            cell.textLabel?.text = item
        }
        
        
        if  UserDefaultsManager.getUserDefaultsArray(.municipio) == nil {
            UserDefaultsManager.saveUserDefaults(value: [""], key: .municipio)
        }
        
        let rememberSelectedArray = UserDefaultsManager.getUserDefaultsArray(.municipio) as! [String]
        
        
        
        //recordar seleccion
        selectionMenu.setSelectedItems(items: rememberSelectedArray) { [weak self] (item, index, isSelected, selectedItems) in

            self?.simpleSelectedMunicipiosArray = selectedItems
        }
        //mostrar pop
        selectionMenu.show(style: .popover(sourceView: self.MunicipioTipo, size: CGSize(width: 250, height: 250)), from: self)
        
        //seleccionando
        selectionMenu.onDismiss = {selectedItems in
            
            if selectedItems == [""] {
                return
            }else{
            UserDefaultsManager.saveUserDefaults(value: selectedItems, key: .municipio)
           
           let toprint = UserDefaultsManager.getUserDefaultsArray(.municipio)
            
            //de nuevo datos
            if let localData = self.interactor?.readLocalFile(forName: "ListaVeri") {
                
                self.interactor!.parseFiltered(jsonData: localData, filtro: toprint![0] as! String)
            }
                //resetear filtro municipio
                UserDefaultsManager.saveUserDefaults(value: [""], key: .tipo)
            self.tableView.reloadData()
        }
        }
    }
    
    @objc func tapFiltroTipo(sender:UITapGestureRecognizer) {
        
            //dropDownList
            let selectionMenu = RSSelectionMenu(dataSource: simpleTipoDataArray) { (cell, item, indexPath) in
                cell.textLabel?.text = item
            }
            
            
            if  UserDefaultsManager.getUserDefaultsArray(.tipo) == nil {
                UserDefaultsManager.saveUserDefaults(value: [""], key: .tipo)
            }
            
            let rememberSelectedArray = UserDefaultsManager.getUserDefaultsArray(.tipo) as! [String]
            //recordar seleccion
            selectionMenu.setSelectedItems(items: rememberSelectedArray) { [weak self] (item, index, isSelected, selectedItems) in

                self?.simpleSelectedTipoArray = selectedItems
            }
            //mostrar pop
            selectionMenu.show(style: .popover(sourceView: self.gasolinaFilterImage, size: CGSize(width: 250, height: 70)), from: self)
            
            //seleccionando
            selectionMenu.onDismiss = {selectedItems in
                
                if selectedItems == [""] {
                    return
                }else{
                UserDefaultsManager.saveUserDefaults(value: selectedItems, key: .tipo)
               
               let toprint = UserDefaultsManager.getUserDefaultsArray(.tipo)
                //de nuevo datos
                if let localData = self.interactor?.readLocalFile(forName: "ListaVeri") {
                    
                    self.interactor!.parseFiltered(jsonData: localData, filtro: toprint![0] as! String)
                }
                self.tableView.reloadData()
            }
            }
    }
}


extension ColibriViewController: UITableViewDelegate,UITableViewDataSource{
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return (self.tableData?.Table!.count)!
        
    }
    
    
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        
        
    
            guard let cell = tableView.dequeueReusableCell(withIdentifier: "colibriCell", for: indexPath) as? colibriTableViewCell else{
                return UITableViewCell()
        }
        //
        cell.layer.masksToBounds = true
        cell.layer.borderColor = Constants.Color.ColibriGreen.cgColor
        cell.layer.borderWidth = 1.5
        
        cell.lblName.text = self.tableData?.Table![indexPath.row].Nombre
            return cell
        
                
    }
    
    func tableView(_ tableView: UITableView, willSelectRowAt indexPath: IndexPath) -> IndexPath? {
        
        print(indexPath.row)
        if let url = URL(string: (self.tableData?.Table![indexPath.row].Link)! ){
            UIApplication.shared.open(url)
        }
        return indexPath
    }
    
    
    
    
    
    
}
