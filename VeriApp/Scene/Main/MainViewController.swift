//
//  MainViewController.swift
//  VeriApp
//
//  Created by Emilio on 11/08/21.
//  Copyright (c) 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import RSSelectionMenu


protocol MainDisplayLogic: AnyObject
{
  
}

class MainViewController: VeriAppViewController, MainDisplayLogic
{
  //MARK: OUTLETS
    @IBOutlet weak var tableView: UITableView!
    @IBOutlet weak var placasButton: UIImageView!
    
    @IBOutlet weak var gasetaLink: UILabel!
    
    
 //
  var interactor: MainBusinessLogic?
  var router: (NSObjectProtocol & MainRoutingLogic & MainDataPassing)?

    
    let simpleDataArray = ["0", "1", "2", "3", "4", "5", "6", "7", "8", "9"]
    var simpleSelectedArray = [String]()
    
    
  // MARK: Object lifecycle
  
  override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
  {
    super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
    setup()
  }
  
  required init?(coder aDecoder: NSCoder)
  {
    super.init(coder: aDecoder)
    setup()
  }
  
  // MARK: Setup
  
  private func setup()
  {
    let viewController = self
    let interactor = MainInteractor()
    let presenter = MainPresenter()
    let router = MainRouter()
    viewController.interactor = interactor
    viewController.router = router
    interactor.presenter = presenter
    presenter.viewController = viewController
    router.viewController = viewController
    router.dataStore = interactor
  }
  
  // MARK: Routing
  
  override func prepare(for segue: UIStoryboardSegue, sender: Any?)
  {
    if let scene = segue.identifier {
      let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
      if let router = router, router.responds(to: selector) {
        router.perform(selector, with: segue)
      }
    }
  }
  
  // MARK: View lifecycle
  
  override func viewDidLoad()
  {
    super.viewDidLoad()
    configure()
   
  }
    func configure() {
       
        let tapPlacas = UITapGestureRecognizer(target: self, action: #selector(tapPlaca))
        self.placasButton.isUserInteractionEnabled = true
        self.placasButton.addGestureRecognizer(tapPlacas)
        
        //tableView
        tableView.tableFooterView = UIView()
        self.tableView.delegate = self
        self.tableView.dataSource = self
        self.tableView.isUserInteractionEnabled = false
        self.tableView.separatorStyle = .none
        
        self.tableView.layer.borderWidth = 2
        self.tableView.layer.borderColor = UIColor.black.cgColor
        //
        let text = self.gasetaLink.text
          let textRange = NSRange(location: 0, length: (text?.count)!)
          let attributedText = NSMutableAttributedString(string: text!)
        attributedText.addAttribute(NSAttributedString.Key.underlineStyle, value: NSUnderlineStyle.single.rawValue, range: textRange)
        self.gasetaLink.attributedText = attributedText
        //
        let tap = UITapGestureRecognizer(target: self, action: #selector(self.tapFunction))
        self.gasetaLink.isUserInteractionEnabled = true
        self.gasetaLink.addGestureRecognizer(tap)
        
        
    }
    
    @objc func tapFunction() {
        if let url = URL(string: "https://drive.google.com/file/d/1ynXRFEOkUbSuGgGkPIzYJWT0KcebC4Pz/view" ){
            UIApplication.shared.open(url)
        }
    }
  
    @objc func tapPlaca(sender:UITapGestureRecognizer) {
        //dropDownList
        let selectionMenu = RSSelectionMenu(dataSource: simpleDataArray) { (cell, item, indexPath) in
            cell.textLabel?.text = item
        }
        
        //trae user default
        
        if  UserDefaultsManager.getUserDefaultsArray(.numeroPlacaUserDefault) == nil {
            UserDefaultsManager.saveUserDefaults(value: [""], key: .numeroPlacaUserDefault)
        }
        
        let rememberSelectedArray = UserDefaultsManager.getUserDefaultsArray(.numeroPlacaUserDefault) as! [String]
        
        
        
        //recordar seleccion
        selectionMenu.setSelectedItems(items: rememberSelectedArray) { [weak self] (item, index, isSelected, selectedItems) in

            self?.simpleSelectedArray = selectedItems
        }
        
        //mostrar pop
        selectionMenu.show(style: .popover(sourceView: self.placasButton, size: CGSize(width: 95, height: 400)), from: self)
        
        //seleccionando
        selectionMenu.onDismiss = {selectedItems in
            UserDefaultsManager.saveUserDefaults(value: selectedItems, key: .numeroPlacaUserDefault)
            self.tableView.reloadData()
        }
        
        
        
    }
}

extension MainViewController: UITableViewDataSource,UITableViewDelegate{
    
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return 6
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        
        guard let cell = tableView.dequeueReusableCell(withIdentifier: "mainCell", for: indexPath) as? mainTableViewCell else{
            return UITableViewCell()
        }
        //set tabla al abrir
        //recordar placa
        if  UserDefaultsManager.getUserDefaultsArray(.numeroPlacaUserDefault) == nil {
            UserDefaultsManager.saveUserDefaults(value: [""], key: .numeroPlacaUserDefault)
        }
        
        let selectedPlaca = UserDefaultsManager.getUserDefaultsArray(.numeroPlacaUserDefault) as! [String]
        cell.selectedCelda = selectedPlaca[0]
        cell.CeldaIndex = indexPath.row
        let height = UIScreen.main.bounds.height
        print(height)
        switch height {
        case 667: //se
            cell.heightConstraint.constant = 42.8
        case 736: //se
            cell.heightConstraint.constant = 52.8
        case 812: //12 mini
            cell.heightConstraint.constant = 56
        case 844: //12 pro
            cell.heightConstraint.constant = 61.8
        case 847: //12 mini
            cell.heightConstraint.constant = 64.8
        case 896: //11 pro max
            cell.heightConstraint.constant = 70.8
        case 926: //12 pro max
            cell.heightConstraint.constant = 75
        
        default:
            cell.heightConstraint.constant = 42.8
        }
        
        if indexPath.row == 5{
            cell.cellBackground.layer.style = .none
            cell.cellBackground.layer.borderWidth = 0
            cell.cellBackground.layer.borderColor = UIColor.white.cgColor
            cell.cellBackground.backgroundColor = #colorLiteral(red: 1.0, green: 1.0, blue: 1.0, alpha: 1.0)
        }
        return cell
    }
    
}



